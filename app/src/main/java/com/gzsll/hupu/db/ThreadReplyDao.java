package com.gzsll.hupu.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table THREAD_REPLY.
 */
public class ThreadReplyDao extends AbstractDao<ThreadReply, Void> {

  public static final String TABLENAME = "THREAD_REPLY";

  /**
   * Properties of entity ThreadReply.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property Pid = new Property(0, String.class, "pid", false, "PID");
    public final static Property Puid = new Property(1, String.class, "puid", false, "PUID");
    public final static Property Via = new Property(2, String.class, "via", false, "VIA");
    public final static Property Content =
        new Property(3, String.class, "content", false, "CONTENT");
    public final static Property Create_time =
        new Property(4, String.class, "create_time", false, "CREATE_TIME");
    public final static Property Update_info =
        new Property(5, String.class, "update_info", false, "UPDATE_INFO");
    public final static Property Light_count =
        new Property(6, Integer.class, "light_count", false, "LIGHT_COUNT");
    public final static Property User_banned =
        new Property(7, Integer.class, "user_banned", false, "USER_BANNED");
    public final static Property Floor = new Property(8, Integer.class, "floor", false, "FLOOR");
    public final static Property Time = new Property(9, String.class, "time", false, "TIME");
    public final static Property UserName =
        new Property(10, String.class, "userName", false, "USER_NAME");
    public final static Property UserImg =
        new Property(11, String.class, "userImg", false, "USER_IMG");
    public final static Property Smallcontent =
        new Property(12, String.class, "smallcontent", false, "SMALLCONTENT");
    public final static Property Togglecontent =
        new Property(13, String.class, "togglecontent", false, "TOGGLECONTENT");
    public final static Property Index = new Property(14, Integer.class, "index", false, "INDEX");
    public final static Property IsLight =
        new Property(15, Boolean.class, "isLight", false, "IS_LIGHT");
    public final static Property QuoteHeader =
        new Property(16, String.class, "quoteHeader", false, "QUOTE_HEADER");
    public final static Property QuoteContent =
        new Property(17, String.class, "quoteContent", false, "QUOTE_CONTENT");
    public final static Property ToggleContent =
        new Property(18, String.class, "toggleContent", false, "TOGGLE_CONTENT");
  }

  ;

  public ThreadReplyDao(DaoConfig config) {
    super(config);
  }

  public ThreadReplyDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "'THREAD_REPLY' (" + //
        "'PID' TEXT," + // 0: pid
        "'PUID' TEXT," + // 1: puid
        "'VIA' TEXT," + // 2: via
        "'CONTENT' TEXT," + // 3: content
        "'CREATE_TIME' TEXT," + // 4: create_time
        "'UPDATE_INFO' TEXT," + // 5: update_info
        "'LIGHT_COUNT' INTEGER," + // 6: light_count
        "'USER_BANNED' INTEGER," + // 7: user_banned
        "'FLOOR' INTEGER," + // 8: floor
        "'TIME' TEXT," + // 9: time
        "'USER_NAME' TEXT," + // 10: userName
        "'USER_IMG' TEXT," + // 11: userImg
        "'SMALLCONTENT' TEXT," + // 12: smallcontent
        "'TOGGLECONTENT' TEXT," + // 13: togglecontent
        "'INDEX' INTEGER," + // 14: index
        "'IS_LIGHT' INTEGER," + // 15: isLight
        "'QUOTE_HEADER' TEXT," + // 16: quoteHeader
        "'QUOTE_CONTENT' TEXT," + // 17: quoteContent
        "'TOGGLE_CONTENT' TEXT);"); // 18: toggleContent
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THREAD_REPLY'";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override protected void bindValues(SQLiteStatement stmt, ThreadReply entity) {
    stmt.clearBindings();

    String pid = entity.getPid();
    if (pid != null) {
      stmt.bindString(1, pid);
    }

    String puid = entity.getPuid();
    if (puid != null) {
      stmt.bindString(2, puid);
    }

    String via = entity.getVia();
    if (via != null) {
      stmt.bindString(3, via);
    }

    String content = entity.getContent();
    if (content != null) {
      stmt.bindString(4, content);
    }

    String create_time = entity.getCreate_time();
    if (create_time != null) {
      stmt.bindString(5, create_time);
    }

    String update_info = entity.getUpdate_info();
    if (update_info != null) {
      stmt.bindString(6, update_info);
    }

    Integer light_count = entity.getLight_count();
    if (light_count != null) {
      stmt.bindLong(7, light_count);
    }

    Integer user_banned = entity.getUser_banned();
    if (user_banned != null) {
      stmt.bindLong(8, user_banned);
    }

    Integer floor = entity.getFloor();
    if (floor != null) {
      stmt.bindLong(9, floor);
    }

    String time = entity.getTime();
    if (time != null) {
      stmt.bindString(10, time);
    }

    String userName = entity.getUserName();
    if (userName != null) {
      stmt.bindString(11, userName);
    }

    String userImg = entity.getUserImg();
    if (userImg != null) {
      stmt.bindString(12, userImg);
    }

    String smallcontent = entity.getSmallcontent();
    if (smallcontent != null) {
      stmt.bindString(13, smallcontent);
    }

    String togglecontent = entity.getTogglecontent();
    if (togglecontent != null) {
      stmt.bindString(14, togglecontent);
    }

    Integer index = entity.getIndex();
    if (index != null) {
      stmt.bindLong(15, index);
    }

    Boolean isLight = entity.getIsLight();
    if (isLight != null) {
      stmt.bindLong(16, isLight ? 1l : 0l);
    }

    String quoteHeader = entity.getQuoteHeader();
    if (quoteHeader != null) {
      stmt.bindString(17, quoteHeader);
    }

    String quoteContent = entity.getQuoteContent();
    if (quoteContent != null) {
      stmt.bindString(18, quoteContent);
    }

    String toggleContent = entity.getToggleContent();
    if (toggleContent != null) {
      stmt.bindString(19, toggleContent);
    }
  }

  /** @inheritdoc */
  @Override public Void readKey(Cursor cursor, int offset) {
    return null;
  }

  /** @inheritdoc */
  @Override public ThreadReply readEntity(Cursor cursor, int offset) {
    ThreadReply entity = new ThreadReply( //
        cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // pid
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // puid
        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // via
        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_time
        cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // update_info
        cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // light_count
        cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // user_banned
        cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // floor
        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // time
        cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userName
        cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userImg
        cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // smallcontent
        cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // togglecontent
        cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // index
        cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // isLight
        cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // quoteHeader
        cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // quoteContent
        cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // toggleContent
    );
    return entity;
  }

  /** @inheritdoc */
  @Override public void readEntity(Cursor cursor, ThreadReply entity, int offset) {
    entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
    entity.setPuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setVia(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    entity.setCreate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    entity.setUpdate_info(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    entity.setLight_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
    entity.setUser_banned(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
    entity.setFloor(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
    entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    entity.setUserName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
    entity.setUserImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
    entity.setSmallcontent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    entity.setTogglecontent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
    entity.setIndex(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
    entity.setIsLight(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
    entity.setQuoteHeader(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
    entity.setQuoteContent(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
    entity.setToggleContent(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
  }

  /** @inheritdoc */
  @Override protected Void updateKeyAfterInsert(ThreadReply entity, long rowId) {
    // Unsupported or missing PK type
    return null;
  }

  /** @inheritdoc */
  @Override public Void getKey(ThreadReply entity) {
    return null;
  }

  /** @inheritdoc */
  @Override protected boolean isEntityUpdateable() {
    return true;
  }
}
