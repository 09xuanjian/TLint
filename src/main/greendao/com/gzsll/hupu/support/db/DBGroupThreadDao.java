package com.gzsll.hupu.support.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gzsll.hupu.support.db.DBGroupThread;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBGROUP_THREAD.
*/
public class DBGroupThreadDao extends AbstractDao<DBGroupThread, Long> {

    public static final String TABLENAME = "DBGROUP_THREAD";

    /**
     * Properties of entity DBGroupThread.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lights = new Property(1, Integer.class, "lights", false, "LIGHTS");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property CreateAtUnixTime = new Property(3, Long.class, "createAtUnixTime", false, "CREATE_AT_UNIX_TIME");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property Replies = new Property(6, Integer.class, "replies", false, "REPLIES");
        public final static Property Tid = new Property(7, Integer.class, "tid", false, "TID");
        public final static Property ServerId = new Property(8, Long.class, "serverId", false, "SERVER_ID");
        public final static Property UserId = new Property(9, Long.class, "userId", false, "USER_ID");
        public final static Property CoverId = new Property(10, Long.class, "coverId", false, "COVER_ID");
        public final static Property GroupId = new Property(11, Long.class, "groupId", false, "GROUP_ID");
    };


    public DBGroupThreadDao(DaoConfig config) {
        super(config);
    }
    
    public DBGroupThreadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBGROUP_THREAD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LIGHTS' INTEGER," + // 1: lights
                "'USERNAME' TEXT," + // 2: username
                "'CREATE_AT_UNIX_TIME' INTEGER," + // 3: createAtUnixTime
                "'TITLE' TEXT," + // 4: title
                "'NOTE' TEXT," + // 5: note
                "'REPLIES' INTEGER," + // 6: replies
                "'TID' INTEGER," + // 7: tid
                "'SERVER_ID' INTEGER," + // 8: serverId
                "'USER_ID' INTEGER," + // 9: userId
                "'COVER_ID' INTEGER," + // 10: coverId
                "'GROUP_ID' INTEGER);"); // 11: groupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBGROUP_THREAD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBGroupThread entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer lights = entity.getLights();
        if (lights != null) {
            stmt.bindLong(2, lights);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        Long createAtUnixTime = entity.getCreateAtUnixTime();
        if (createAtUnixTime != null) {
            stmt.bindLong(4, createAtUnixTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        Integer replies = entity.getReplies();
        if (replies != null) {
            stmt.bindLong(7, replies);
        }
 
        Integer tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(8, tid);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(9, serverId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(10, userId);
        }
 
        Long coverId = entity.getCoverId();
        if (coverId != null) {
            stmt.bindLong(11, coverId);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(12, groupId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBGroupThread readEntity(Cursor cursor, int offset) {
        DBGroupThread entity = new DBGroupThread( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // lights
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createAtUnixTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // replies
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // tid
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // serverId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // coverId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // groupId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBGroupThread entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLights(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateAtUnixTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReplies(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setServerId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setCoverId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setGroupId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBGroupThread entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBGroupThread entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
