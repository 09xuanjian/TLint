package com.gzsll.hupu.support.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gzsll.hupu.support.db.DBThreadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBTHREAD_INFO.
*/
public class DBThreadInfoDao extends AbstractDao<DBThreadInfo, Long> {

    public static final String TABLENAME = "DBTHREAD_INFO";

    /**
     * Properties of entity DBThreadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, Long.class, "serverId", false, "SERVER_ID");
        public final static Property Uid = new Property(2, Integer.class, "uid", false, "UID");
        public final static Property LastReplyTime = new Property(3, Integer.class, "lastReplyTime", false, "LAST_REPLY_TIME");
        public final static Property Special = new Property(4, Integer.class, "special", false, "SPECIAL");
        public final static Property Lights = new Property(5, Integer.class, "lights", false, "LIGHTS");
        public final static Property Attention = new Property(6, Integer.class, "attention", false, "ATTENTION");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property Zan = new Property(8, Integer.class, "zan", false, "ZAN");
        public final static Property Digest = new Property(9, Integer.class, "digest", false, "DIGEST");
        public final static Property CreateAtUnixTime = new Property(10, Long.class, "createAtUnixTime", false, "CREATE_AT_UNIX_TIME");
        public final static Property Replies = new Property(11, Integer.class, "replies", false, "REPLIES");
        public final static Property GroupId = new Property(12, Long.class, "groupId", false, "GROUP_ID");
        public final static Property Tid = new Property(13, Long.class, "tid", false, "TID");
        public final static Property SharedImg = new Property(14, String.class, "sharedImg", false, "SHARED_IMG");
        public final static Property Username = new Property(15, String.class, "username", false, "USERNAME");
        public final static Property CreateAt = new Property(16, String.class, "createAt", false, "CREATE_AT");
        public final static Property Title = new Property(17, String.class, "title", false, "TITLE");
        public final static Property Note = new Property(18, String.class, "note", false, "NOTE");
        public final static Property Content = new Property(19, String.class, "content", false, "CONTENT");
        public final static Property UserId = new Property(20, Long.class, "userId", false, "USER_ID");
        public final static Property GroupsId = new Property(21, Long.class, "groupsId", false, "GROUPS_ID");
    };


    public DBThreadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DBThreadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBTHREAD_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVER_ID' INTEGER," + // 1: serverId
                "'UID' INTEGER," + // 2: uid
                "'LAST_REPLY_TIME' INTEGER," + // 3: lastReplyTime
                "'SPECIAL' INTEGER," + // 4: special
                "'LIGHTS' INTEGER," + // 5: lights
                "'ATTENTION' INTEGER," + // 6: attention
                "'TYPE' INTEGER," + // 7: type
                "'ZAN' INTEGER," + // 8: zan
                "'DIGEST' INTEGER," + // 9: digest
                "'CREATE_AT_UNIX_TIME' INTEGER," + // 10: createAtUnixTime
                "'REPLIES' INTEGER," + // 11: replies
                "'GROUP_ID' INTEGER," + // 12: groupId
                "'TID' INTEGER," + // 13: tid
                "'SHARED_IMG' TEXT," + // 14: sharedImg
                "'USERNAME' TEXT," + // 15: username
                "'CREATE_AT' TEXT," + // 16: createAt
                "'TITLE' TEXT," + // 17: title
                "'NOTE' TEXT," + // 18: note
                "'CONTENT' TEXT," + // 19: content
                "'USER_ID' INTEGER," + // 20: userId
                "'GROUPS_ID' INTEGER);"); // 21: groupsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBTHREAD_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBThreadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindLong(2, serverId);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(3, uid);
        }
 
        Integer lastReplyTime = entity.getLastReplyTime();
        if (lastReplyTime != null) {
            stmt.bindLong(4, lastReplyTime);
        }
 
        Integer special = entity.getSpecial();
        if (special != null) {
            stmt.bindLong(5, special);
        }
 
        Integer lights = entity.getLights();
        if (lights != null) {
            stmt.bindLong(6, lights);
        }
 
        Integer attention = entity.getAttention();
        if (attention != null) {
            stmt.bindLong(7, attention);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Integer zan = entity.getZan();
        if (zan != null) {
            stmt.bindLong(9, zan);
        }
 
        Integer digest = entity.getDigest();
        if (digest != null) {
            stmt.bindLong(10, digest);
        }
 
        Long createAtUnixTime = entity.getCreateAtUnixTime();
        if (createAtUnixTime != null) {
            stmt.bindLong(11, createAtUnixTime);
        }
 
        Integer replies = entity.getReplies();
        if (replies != null) {
            stmt.bindLong(12, replies);
        }
 
        Long groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(13, groupId);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(14, tid);
        }
 
        String sharedImg = entity.getSharedImg();
        if (sharedImg != null) {
            stmt.bindString(15, sharedImg);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(16, username);
        }
 
        String createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindString(17, createAt);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(18, title);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(19, note);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(20, content);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(21, userId);
        }
 
        Long groupsId = entity.getGroupsId();
        if (groupsId != null) {
            stmt.bindLong(22, groupsId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBThreadInfo readEntity(Cursor cursor, int offset) {
        DBThreadInfo entity = new DBThreadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lastReplyTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // special
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lights
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // attention
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // zan
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // digest
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // createAtUnixTime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // replies
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // groupId
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // tid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sharedImg
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // username
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // createAt
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // title
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // note
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // content
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // userId
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21) // groupsId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBThreadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLastReplyTime(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSpecial(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLights(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAttention(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setZan(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDigest(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreateAtUnixTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setReplies(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setGroupId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setTid(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setSharedImg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUsername(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateAt(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTitle(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNote(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setContent(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUserId(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setGroupsId(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBThreadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBThreadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
